
class Solution{
    public:
    
    char check(int delrow,int delcol)
    {
        if(delrow==-1 and delcol==0) return 'U';
        
        if(delrow==0 and delcol==1) return 'R';
        
        if(delrow==1 and delcol==0) return 'D';
        
        if(delrow==0 and delcol==-1) return 'L';
    }
    
    void solve(int row,int col,vector<vector<int>>&grid,string &str,vector<string>&ans,vector<vector<int>>&visited)
    {
        
        int n=grid.size();
        int m=grid[0].size();  // n==m
        
        // base case
        if(grid[0][0]==0) return;
        
        if(row==n-1 and col==m-1)
        {
            ans.push_back(str);
            return;
        }
        
        visited[row][col]=1;
        
        int delrow[]={-1,0,+1,0};
        int delcol[]={0,+1,0,-1};
        
        for(int i=0;i<4;i++)
        {
            int newrow=row+delrow[i];
            int newcol=col+delcol[i];
            
            if(newrow>=0 and newrow<n and newcol>=0 and newcol<m and grid[newrow][newcol]==1 and visited[newrow][newcol]==0)
            {
                char ch=check(delrow[i],delcol[i]);
                str.push_back(ch);
                
                solve(newrow,newcol,grid,str,ans,visited);
                str.pop_back();
                
            }
            else
            {
               continue; 
            }
        }
        
        
        visited[row][col]=0;
        
        
    }
    
    vector<string> findPath(vector<vector<int>> &grid, int n) {
        string str="";
        vector<string>ans;
        vector<vector<int>>visited(n,vector<int>(n,0));
        
        solve(0,0,grid,str,ans,visited);
        
        
        return ans;
    }
};
