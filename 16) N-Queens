class Solution {
public:

     bool is_valid(int row,int col,vector<string>board)
     {
         int n=board.size();
         int m=board[0].size();  // n==m
          
         // horizontal 
         for(int j=0;j<n;j++)
         {
             if(board[row][j]=='Q') return false;
         }

         // vertical
         for(int i=0;i<n;i++)
         {
             if(board[i][col]=='Q') return false;
         }

         int i=row,j=col;

         while(i>=0 and j>=0)
         {
             if(board[i][j]=='Q') return false;

             i--;
             j--;
         }

         i=row,j=col;

         while(i<n and j>=0)
         {
             if(board[i][j]=='Q') return false;

             i++;
             j--;
         }

         i=row,j=col;

         while(i>=0 and j<m)
         {
             if(board[i][j]=='Q') return false;
             i--;
             j++;
         }

         i=row,j=col;

         while(i<n and j<m)
         {
             if(board[i][j]=='Q') return false;
             i++;
             j++;
         }


       return true;

     }
    
    void solve(vector<string>&board,vector<vector<string>>&ans,int col,int n)
    {
        //base case
        if(col==n)
        {
            ans.push_back(board);
            return;
        }

        for(int row=0;row<n;row++)
        {
            if(is_valid(row,col,board))
            {
                board[row][col]='Q';

                solve(board,ans,col+1,n);

                board[row][col]='.';
            }
        }

    }

    vector<vector<string>> solveNQueens(int n) {
         vector<vector<string>>ans;

         vector<string>board;

         string str="";
        
        // making the first empty board

         for(int i=0;i<n;i++) str+='.';

         for(int i=0;i<n;i++) board.push_back(str);

         solve(board,ans,0,n);

         return ans;
    }
};
