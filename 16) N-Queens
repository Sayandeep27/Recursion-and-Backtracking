class Solution {
public:
    void backtrack(vector<vector<string>>& result, vector<int>& currentPlacement, int row, int n) {
        
        // Base case: If all queens are placed (valid placement found)
        if (row == n) {
            result.push_back(generateBoard(currentPlacement, n));
            return;
        }
        
        // Try placing queen in each column of current row
        for (int col = 0; col < n; ++col) {
            if (isValid(currentPlacement, row, col)) 
            {  
                // Place queen at (row, col)
                currentPlacement[row] = col;

                // Recursively try to place queens in next rows
                backtrack(result, currentPlacement, row + 1, n);

                // Backtrack: Remove queen from (row, col)
                currentPlacement[row] = -1;
            }
        }
    }


    // Utility function to check if placing a queen at (row, col) is valid
    bool isValid(vector<int>& currentPlacement, int row, int col) 
    {
        for (int i = 0; i < row; ++i)
        {   
            // Check if there is a queen in the same column or diagonals
            if (currentPlacement[i] == col || abs(i - row) == abs(currentPlacement[i] - col))
            {
                return false;
            }
        }
        return true;
    }
    
    // Utility function to generate the board configuration from current queen placements
    vector<string> generateBoard(vector<int>& currentPlacement, int n) 
    {
        vector<string> board(n, string(n, '.')); // Initialize board with all '.' characters
        
        for (int i = 0; i < n; ++i)
        {
            board[i][currentPlacement[i]] = 'Q'; // Place 'Q' where queens are placed
        }
        
        return board;
    }


    
    vector<vector<string>> solveNQueens(int n) {
        
        vector<vector<string>> result; // To store all solutions
        vector<int> currentPlacement(n, -1); // Stores column index of queens placed(current queen placements)
        

        // Start placing queens from the first row (row index 0)
        backtrack(result, currentPlacement, 0, n);
        
        return result;
    }
};
